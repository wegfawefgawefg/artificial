Done Log
========

Core (current session)
- Vendored sol2: sol/sol.hpp with minimal sol/config.hpp; CMake detects and defines GUB_USE_SOL2.
- Lua bindings via sol2: register_powerup/register_item/register_gun; api table (add_plate, heal, add_move_speed).
- Items: desc + triggers (on_use, on_tick, on_shoot, on_damage placeholder). Engine calls on_use/on_tick/on_shoot.
- Pickups/Items: auto-pickup powerups; items require pickup key (F with legacy E support).
- Inventory UI: slots 1–0; right panel shows selected item details including desc from Lua.
- Guns: GunsPool + GroundGunsPool; enemies can drop guns (weighted from Lua drops); F equips ground guns; RPM cooldown; per-instance mag/reserve.
- Drops: content.lua declares weighted drop tables for powerups/items/guns; used on enemy death. Fallback heuristic preserved.
- Sprites: SDL2_image textures loaded via TextureStore; SpriteIdRegistry + SpriteStore built from mods/*/graphics with manifests + fallback.
- Movement: player speed scales with stats.move_speed baseline 350.
- Docs: stats_and_triggers.md added. Added modifiers.md (design draft) and assets_we_need.txt (missing assets list).

Recent session (added)
- VID instances across guns/items; inventory/ground/equipped hold VIDs.
- Inventory drop mode (Q + 1–0). Guns drop as GroundGuns; items drop 1 per press.
- Auto-stacking guarded by def_type + modifiers_hash + no cooldown.
- Namespaced assets for sprites and sounds; auto-prefix by mod when missing.
- Sound system (SDL_mixer): per-gun/item sounds + fallbacks; loader scans mods.
- Crates fully driven by Lua (defs, crates UI/label, crate drops, on_open); spawn_crate is safe-by-default.
- Projectiles from Lua defs; guns specify projectile_type. Spawned ahead of player with owner set.
- Manual reload with debounce; “drop mag” alert once; jam/unjam with progress and sounds.
- Fire modes: auto, single (edge-triggered), burst (burst_count/burst_rpm).

Safety/Polish
- Spawn safety: nearest-walkable search nudges spawns; ground items gently repel each other.
- Visual clarity: NPCs red; pickups/items drawn with outline when overlapped; pickup prompt UI.

Scaffolding
- Mods scaffold: mods/base/ with info.toml and folders (graphics, sounds, music, scripts). Base content in scripts/content.lua.
- Hot reload: ModsManager scans and rebuilds sprite registry/store on asset changes; script changes detected.

Session: Sprites, Reload, Dash, UX/FX
- Projectiles: Added `sprite` field to Lua `register_projectile{}`; engine resolves to `sprite_id` and renders projectile textures (fallback to red rect).
- Sprites: Enforced namespaced-only lookups across powerups/items/guns/entities; removed implicit non-namespaced fallbacks. Added one-frame red warnings when attempting to draw missing sprites/textures.
- Held gun: Rendered around player, rotated toward cursor. Tunable offsets for hold and muzzle (`GUN_HOLD_OFFSET_UNITS`, `GUN_MUZZLE_OFFSET_UNITS`).
- Firing bug: Fixed firing after dropping equipped gun (unequip on drop and disallow firing without equipped gun).
- Movement: Slowed base speed; added Shift dash. Dash stocks with timed refill. Lua APIs: `api.set_dash_max`, `api.set_dash_stocks`, `api.add_dash_stocks`. Global `on_dash()` hook and `register_on_dash(fn)`.
- Shield regen: Regenerates only after 3s without taking damage; tracked per-entity via `time_since_damage`.
- UI/FX: Reticle shake on unjam mash and success; gun panel shake on equip; bottom player condition bar (health red, plates grey slivers, shield cyan) plus dash stock indicators; enemy health bars above damaged NPCs.
- Active reload system: Eject phase then fill; active window for instant reload.
  - GunDef fields: `reload_time`, `eject_time`, `ar_pos`, `ar_pos_variance`, `ar_size`, `ar_size_variance` (legacy `active_reload_window` maps to `ar_size`).
  - Hooks: Global `on_active_reload`, `on_eject`, `on_reload_start`, `on_reload_finish`; per-gun `on_active_reload` and per-item `on_active_reload`; also per-gun/item eject/start/finish variants.
  - UI: Active window is translucent band; progress rectangle grows from bottom of bar; successful active reload plays `base:ui_super_confirm` and alerts.
- Formatting: Wired VS Code to use clang-format-14; repo formatted to 4-space indents; fixed invalid settings JSON.

Session: Fire Modes, AR Lockout, Pickups, Bars, Ticks
- Gun UI: Display fire mode (Auto/Semi/Burst (N)) and Burst RPM; added shot/burst intervals with derived ms in UI.
- Content: Added Burst Rifle (type 202) with 5-shot bursts for semi-auto testing.
- Dash: Uses WASD 8-way direction; dash direction latches for the dash duration.
- Active reload: Added failure lockout when pressing reload outside window; new hooks `on_failed_active_reload` and `on_tried_to_active_reload_after_failing` (global/gun/item). Reload UI greys during lockout and shakes on fail.
- Pickup UX: Manual pickup selects only the most-overlapped ground gun/item per press; prompt shows only for that target and uses the actual bound key name. Default pickup key is F (legacy E removed).
- Ground visuals: Ground guns/items reduced to half character size; power-ups shrunk. Ground guns and power-ups resolve sprites from defs at draw time if `sprite_id` missing.
- Hooks: Added `on_pickup`/`on_drop` for guns and items.
- Ticking: Introduced opt-in ticking for items (`on_tick`) and guns (`on_step`) with `tick_rate_hz` and `tick_phase` (before/after). Initial scope limited to player inventory; document status in docs/ticking.md.
- Player bars: Reworked bottom condition UI to fixed-width (25% screen) three rows: Shield (with current/max numbers), Plates (slivers up to 20 + count), Health (current/max). Dash stocks rendered to the right.
  - Dash UI follow-up: moved dash to its own fourth row under HP with left-aligned slivers (like plates) and a refill progress sliver above; removed old right-side dash boxes.
- Ground sizes: Tuned ground guns/items to 0.125×0.125 (≈half player). Power-ups smaller. Crates set to ~0.45×0.20 (≈80% player height, 180% width).
  - Spawn safety: `api.spawn_item`/`api.spawn_gun` now push to nearest walkable tile center to avoid impassable intersections.

Session: Accuracy, Shotguns, Pages, Metrics, UX
- Accuracy model: per-gun base deviation + recoil (linear control recovery + clamp) + per-entity movement spread accumulator (linear inc/decay) -> exact reticle circle at cursor distance.
- Reticle: renders r = dist * tan(theta); shots (and pellets) sample uniform angle within [-theta, +theta].
- Guns: added pellets per shot (multi-projectile from one ammo); shotguns added (pump-2, semi-auto, full-auto) and auto-spawned in player inventory for testing.
- Movement inaccuracy: per-entity accumulator with per-entity rates and cap in Stats; normalized by world speed (PLAYER_SPEED_UNITS_PER_SEC).
- Recoil cap: per-gun `max_recoil_spread_deg` prevents indefinite growth; recovery still linear via control.
- Stage pages: clean Stage Review and Next Area (no world/HUD), click/space to advance, short input lockouts to avoid accidental firing; animated stats reveal with fast count-up and SFX.
- Metrics: added damage taken HP/shields, plates gained/consumed; per-player and totals; kill attribution; pickups/drops/missed counts.
- UX: pickup debounce (setting) and best-overlap; cross-spacing for ground items/guns; push away from crates.

Session: Ammo System, Panels, Inventory UX
- Ammo types: Added `register_ammo{ name,type,desc,sprite,size_x,size_y,speed,damage_mult,armor_pen,shield_mult,range,falloff_start,falloff_end,falloff_min_mult,pierce_count, on_hit,on_hit_entity,on_hit_tile }`.

Refactor: Globals and signatures (2025-09)
-----------------------------------------

- Introduced global singletons in `src/globals.hpp` for shared subsystems: `g_gfx` (window/renderer/font), `g_audio` (sound store), `g_mods`, `g_sprite_ids`, `g_sprite_store`, `g_textures`, `g_binds`, `g_input`, `g_settings`, and `g_state`.
- Moved projectiles into `State` as `state.projectiles`.
- Added `State::dt` and set it each frame; consumers read from `g_state->dt`.
- Updated function signatures to avoid passing globals:
  - `render_frame()` (no args; uses globals)
  - `generate_room()` (no args; uses globals)
  - `sim_step_projectiles()` (no args; uses `state.projectiles`)
  - `build_inputs(...)` no longer takes `dt` (reads from `g_state->dt`).
- Cleaned up ambiguous conditionals and shadowed locals to satisfy strict warnings.

Follow-up refactor (globals usage)
----------------------------------

- Input system now uses globals; removed params:
  - `build_inputs()` reads `g_binds`, `g_input`, `g_state`, `g_gfx`.
  - `process_input_per_mode()` reads `g_state` and `g_gfx`.
  - `process_events()` writes to `g_input` and `g_state`.
- Physics step: `sim_move_and_collide()` no longer takes `Graphics&`.
- Room helpers: dropped `State&` params:
  - `tile_blocks_entity(int x,int y)`, `nearest_walkable_tile(glm::ivec2,int)`, `ensure_not_in_block(glm::vec2)` now read `g_state`.
- Updated all call sites accordingly; project builds clean.

LuaManager globals refactor
---------------------------

- Removed `State&` from LuaManager `call_*` methods; they read `g_state`:
  - Item hooks: on_use, on_tick, on_shoot, on_damage, on_active_reload, on_failed_active_reload,
    on_tried_after_failed_ar, on_pickup, on_drop, on_eject, on_reload_start, on_reload_finish.
  - Gun hooks: on_step, on_pickup, on_drop, on_active_reload, on_failed_active_reload,
    on_tried_after_failed_ar, on_eject, on_reload_start, on_reload_finish, on_jam.
  - Global hooks: on_dash, on_step.
  - Crates: call_crate_on_open now omits `State&`.
- Room: `call_generate_room()` no longer takes `State&`.
- Updated all call sites in `sim.cpp`, `main.cpp`, and `room.cpp`.

Misc global cleanups
--------------------

- `TextureStore::load_all()` now uses `g_gfx->renderer` and `*g_sprite_store`; removed params.
- `ui_draw_kv_line(...)` in `render.cpp` reads `g_gfx` directly; removed `renderer`/`font` params.

In-Progress: Main Loop Refactor
-------------------------------

- Goal: Make `main.cpp` only do init → loop (step, render) → cleanup. No logic or rendering inside main.
- Added `sim_step()` in `src/sim.hpp/cpp` which wraps per-frame work:
  - Event polling, dt calculation, input build
  - Alert aging/purge and hot-reload polling
  - Fixed-timestep updates (pre-physics ticks, movement/collision, shield/reload, pickups, drop mode, number row, metrics/lockouts, exit tile transitions + score review prep, camera follow)
  - Crate open progression
  - Portions of active-reload and firing logic are being moved into `sim_step()` next.
- Next: Replace the large per-frame body in `main.cpp` with a single call to `sim_step()` and `render_frame()`; keep FPS title and `--frames` logic in main.

Next candidates:
- Remove remaining `Graphics&` parameters (e.g., `build_inputs(...)`, `sim_move_and_collide(...)`) and use `g_gfx` internally.
- Gradually expand `RuntimeSettings` to replace hard constants (dash timings, spread dynamics) with runtime-tunable values.
- Optionally remove `State&` parameters from Lua manager calls where they already reference `g_state`.
- Gun ↔ Ammo: Guns can declare `compatible_ammo = { {type=.., weight=..}, ... }`. Ammo is selected at gun spawn (weighted) or via Lua.
- Ammo behavior: Entity‑only armor penetration, shield multiplier, range + linear falloff, and `pierce_count` through entities.
- Ammo hooks: on_hit/on_hit_entity/on_hit_tile invoked on impact.
- Lua API: `api.set_equipped_ammo(type)` (compat‑checked) and `api.set_equipped_ammo_force(type)` (always). Both raise brief alerts.
- UI formatting: key/value lines with consistent 2‑decimal formatting for floats.
- Right gun panel: Moved up and enlarged; shows full gun + ammo stats and sprites; toggled by `V`.

Refactor: render/sim extraction (2025-09-11)
-------------------------------------------
- Moved all rendering out of `src/main.cpp` into `src/render.cpp` (`render_frame(...)`).
- Moved simulation helpers into `src/sim.cpp` (`sim_*` functions) and called from the fixed-step loop.
- Restored/expanded UI:
  - Ground inspect panel (toggle V), character slide-out (C), equipped gun panel (V).
  - Reticle UI (spread circle; mag/reserve bars; Active Reload window; JAMMED/RELOAD/NO AMMO), held-gun rotation.
  - Bottom bars (shield/plates/health/dash); NPC HP/shield/plates (always visible).
  - Exit countdown bar; Score Review page (animated metrics + sounds); Next Stage page.
- Fixed number-row equip (1–0) to equip guns when not in drop mode.
- Center inspect panel: Inventory hover after ~0.12s shows details; when standing over ground item/gun and `V` is ON, shows that ground target’s details.
- Inventory list: draws icons next to names; drag‑and‑drop reordering between slots; clicking slots does not use items.
- Input change: `V` no longer toggles camera follow; it toggles the gun info panel.
