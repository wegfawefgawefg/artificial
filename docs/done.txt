Done Log
========

Core (current session)
- Vendored sol2: sol/sol.hpp with minimal sol/config.hpp; CMake detects and defines GUB_USE_SOL2.
- Lua bindings via sol2: register_powerup/register_item/register_gun; api table (add_plate, heal, add_move_speed).
- Items: desc + triggers (on_use, on_tick, on_shoot, on_damage placeholder). Engine calls on_use/on_tick/on_shoot.
- Pickups/Items: auto-pickup powerups; items require pickup key (F with legacy E support).
- Inventory UI: slots 1–0; right panel shows selected item details including desc from Lua.
- Guns: GunsPool + GroundGunsPool; enemies can drop guns (weighted from Lua drops); F equips ground guns; RPM cooldown; per-instance mag/reserve.
- Drops: content.lua declares weighted drop tables for powerups/items/guns; used on enemy death. Fallback heuristic preserved.
- Sprites: SDL2_image textures loaded via TextureStore; SpriteIdRegistry + SpriteStore built from mods/*/graphics with manifests + fallback.
- Movement: player speed scales with stats.move_speed baseline 350.
- Docs: stats_and_triggers.md added. Added modifiers.md (design draft) and assets_we_need.txt (missing assets list).

Recent session (added)
- VID instances across guns/items; inventory/ground/equipped hold VIDs.
- Inventory drop mode (Q + 1–0). Guns drop as GroundGuns; items drop 1 per press.
- Auto-stacking guarded by def_type + modifiers_hash + no cooldown.
- Namespaced assets for sprites and sounds; auto-prefix by mod when missing.
- Sound system (SDL_mixer): per-gun/item sounds + fallbacks; loader scans mods.
- Crates fully driven by Lua (defs, crates UI/label, crate drops, on_open); spawn_crate is safe-by-default.
- Projectiles from Lua defs; guns specify projectile_type. Spawned ahead of player with owner set.
- Manual reload with debounce; “drop mag” alert once; jam/unjam with progress and sounds.
- Fire modes: auto, single (edge-triggered), burst (burst_count/burst_rpm).

Safety/Polish
- Spawn safety: nearest-walkable search nudges spawns; ground items gently repel each other.
- Visual clarity: NPCs red; pickups/items drawn with outline when overlapped; pickup prompt UI.

Scaffolding
- Mods scaffold: mods/base/ with info.toml and folders (graphics, sounds, music, scripts). Base content in scripts/content.lua.
- Hot reload: ModsManager scans and rebuilds sprite registry/store on asset changes; script changes detected.

Session: Sprites, Reload, Dash, UX/FX
- Projectiles: Added `sprite` field to Lua `register_projectile{}`; engine resolves to `sprite_id` and renders projectile textures (fallback to red rect).
- Sprites: Enforced namespaced-only lookups across powerups/items/guns/entities; removed implicit non-namespaced fallbacks. Added one-frame red warnings when attempting to draw missing sprites/textures.
- Held gun: Rendered around player, rotated toward cursor. Tunable offsets for hold and muzzle (`GUN_HOLD_OFFSET_UNITS`, `GUN_MUZZLE_OFFSET_UNITS`).
- Firing bug: Fixed firing after dropping equipped gun (unequip on drop and disallow firing without equipped gun).
- Movement: Slowed base speed; added Shift dash. Dash stocks with timed refill. Lua APIs: `api.set_dash_max`, `api.set_dash_stocks`, `api.add_dash_stocks`. Global `on_dash()` hook and `register_on_dash(fn)`.
- Shield regen: Regenerates only after 3s without taking damage; tracked per-entity via `time_since_damage`.
- UI/FX: Reticle shake on unjam mash and success; gun panel shake on equip; bottom player condition bar (health red, plates grey slivers, shield cyan) plus dash stock indicators; enemy health bars above damaged NPCs.
- Active reload system: Eject phase then fill; active window for instant reload.
  - GunDef fields: `reload_time`, `eject_time`, `ar_pos`, `ar_pos_variance`, `ar_size`, `ar_size_variance` (legacy `active_reload_window` maps to `ar_size`).
  - Hooks: Global `on_active_reload`, `on_eject`, `on_reload_start`, `on_reload_finish`; per-gun `on_active_reload` and per-item `on_active_reload`; also per-gun/item eject/start/finish variants.
  - UI: Active window is translucent band; progress rectangle grows from bottom of bar; successful active reload plays `base:ui_super_confirm` and alerts.
- Formatting: Wired VS Code to use clang-format-14; repo formatted to 4-space indents; fixed invalid settings JSON.

Session: Fire Modes, AR Lockout, Pickups, Bars, Ticks
- Gun UI: Display fire mode (Auto/Semi/Burst (N)) and Burst RPM; added shot/burst intervals with derived ms in UI.
- Content: Added Burst Rifle (type 202) with 5-shot bursts for semi-auto testing.
- Dash: Uses WASD 8-way direction; dash direction latches for the dash duration.
- Active reload: Added failure lockout when pressing reload outside window; new hooks `on_failed_active_reload` and `on_tried_to_active_reload_after_failing` (global/gun/item). Reload UI greys during lockout and shakes on fail.
- Pickup UX: Manual pickup selects only the most-overlapped ground gun/item per press; prompt shows only for that target and uses the actual bound key name. Default pickup key is F (legacy E removed).
- Ground visuals: Ground guns/items reduced to half character size; power-ups shrunk. Ground guns and power-ups resolve sprites from defs at draw time if `sprite_id` missing.
- Hooks: Added `on_pickup`/`on_drop` for guns and items.
- Ticking: Introduced opt-in ticking for items (`on_tick`) and guns (`on_step`) with `tick_rate_hz` and `tick_phase` (before/after). Initial scope limited to player inventory; document status in docs/ticking.md.
- Player bars: Reworked bottom condition UI to fixed-width (25% screen) three rows: Shield (with current/max numbers), Plates (slivers up to 20 + count), Health (current/max). Dash stocks rendered to the right.
  - Dash UI follow-up: moved dash to its own fourth row under HP with left-aligned slivers (like plates) and a refill progress sliver above; removed old right-side dash boxes.
- Ground sizes: Tuned ground guns/items to 0.125×0.125 (≈half player). Power-ups smaller. Crates set to ~0.45×0.20 (≈80% player height, 180% width).
- Spawn safety: `api.spawn_item`/`api.spawn_gun` now push to nearest walkable tile center to avoid impassable intersections.
